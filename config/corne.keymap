/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
//                    | ALT | LWR | SPC |   | ENT | RSE  | GUI |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RSHFT
                  &kp RALT  &mo 2 &kp SPACE   &kp RET &lt 1 ESC &kp LGUI
                        >;
                };
                number_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | DEL  |
// | CTRL |     |     |     |     | SCR↑|   | LFT | DWN |  UP | RGT |     |      |
// | SHFT | MV← | MV↓ | MV→ | SCR↓|     |   |     |     |     |     |     |      |
//                    | ALT | Function layer | SPC |   |     |     |     |
                        bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp DEL
   &kp LCTRL  &none        &none     &none &none     &none &kp LEFT &kp DOWN &kp UP &kp RIGHT &none  &none
   &kp LSHFT  &none &none &none &none &none &none   &none   &none &none    &none &none
                           &kp LALT     &mo 3       &kp SPACE    &none  &trans   &none
                        >;
                };

                symbol_layer {
// -----------------------------------------------------------------------------------------
// | CTRL` |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  | (  |  )  | ` | BSPC |
// | GUI+C |  '  |  -  |  +  |  =  |  #  |   |  _  |  :  |  {  |  }  |  ?  | SHFT |
// | GUI+V |  ^  |  /  |  *  |  \  |  |  |   |  ~  |  "  |  [  |  ]  |  @  |      |
//                    | ALT | ESC | SPC |   | ENT |  _  | GUI |
                        bindings = <
   &kp LC(GRAVE) &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET &kp AMPS  &kp LPAR  &kp RPAR  &kp GRAVE &kp BSPC
   &kp LG(C)     &kp SQT   &kp MINUS &kp PLUS  &kp EQUAL &kp HASH     &kp UNDER &kp COLON &kp LBRC  &kp RBRC  &kp QMARK &kp RSHFT
   &kp LG(V)     &kp CARET &kp FSLH  &kp ASTRK &kp BSLH  &kp PIPE     &kp TILDE &kp DQT   &kp LBKT  &kp RBKT  &kp AT    &none
                           &kp LALT  &kp ESC   &kp SPACE    &kp RET   &kp UNDER &kp LGUI
                        >;
                };
            function_layer {
// -----------------------------------------------------------------------------------------
// | BOOT | F1  | F2  |     |     | F5  |   |     |     |     | F11 | F12 | PSCRN |
// | BT_CLR | BT_SEL 0 | BT_SEL 1 | BT_SEL 2 | BT_SEL 3 | BT_SEL 4 |   | MUTE | VOL_DN | VOL_UP | PLAY |     |     |
// |     |     |     |     |     |     |   |     |     |     |     |     |     |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &bootloader &kp F1       &kp F2       &none        &none        &kp F5          &none      &none      &none      &kp F11     &kp F12     &kp PSCRN
   &bt BT_CLR  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4    &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &kp C_PP &none       &none
   &none     &none     &none     &none     &none        &none           &none      &none      &none      &none       &none       &none
                                          &trans       &trans       &none           &trans     &trans     &trans
                        >;
                };
        };

};